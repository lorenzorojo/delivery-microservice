networks:
  laravel_network:
    driver: bridge

volumes:
  db_server1_data:
    driver: local
  db_server2_data:
    driver: local
  db_server3_data:
    driver: local
  db_server4_data:
    driver: local

services:
  # Postgresql for Auth service
  db_server1:
    image: postgres:13
    container_name: "db_server1_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5450:5432"
    volumes:
      - db_server1_data:/var/lib/postgresql/data
    networks:
      - laravel_network

  # MongoDB for inventory service
  db_server2:
    image: mongo:latest
    container_name: "db_server2_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - db_server2_data:/data/db
    networks:
      - laravel_network
    ports:
      - "27020:27017"

  # MySQL for Email service
  db_server3:
    image: mysql:8.0
    container_name: "db_server3_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3311:3306"
    volumes:
      - db_server3_data:/var/lib/mysql
    networks:
      - laravel_network

  # MongoDB for Orders service
  db_server4:
    image: mongo:latest
    container_name: "db_server4_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - db_server4_data:/data/db
    networks:
      - laravel_network
    ports:
      - "27021:27017"

  # Auth service Laravel
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: "auth-service_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    volumes:
      - ./auth-service:/var/www/html
    environment:
      - APP_NAME=${AUTH_APP_NAME}
      - APP_ENV=${AUTH_APP_ENV}
      - APP_KEY=${AUTH_APP_KEY}
      - APP_DEBUG=${AUTH_APP_DEBUG}
      - DB_CONNECTION=pgsql
      - DB_HOST=db_server1
      - DB_PORT=5432
      - DB_DATABASE=${AUTH_DB_DATABASE}
      - DB_USERNAME=${AUTH_DB_USERNAME}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
      - JWT_SECRET=${AUTH_JWT_SECRET}
    ports:
      - "8888:80"
    depends_on:
      - db_server1
    networks:
      - laravel_network

  # Inventory service - Laravel
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: "inventory-service_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    volumes:
      - ./inventory-service:/var/www/html
    environment:
      - APP_NAME=${INVENTORY_APP_NAME}
      - APP_ENV=${INVENTORY_APP_ENV}
      - APP_KEY=${INVENTORY_APP_KEY}
      - APP_DEBUG=${INVENTORY_APP_DEBUG}
      - MONGO_URI="mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@db_server2:27017"
      - JWT_SECRET=${INVENTORY_JWT_SECRET}
    ports:
      - "8889:80"
    depends_on:
      - db_server2
    networks:
      - laravel_network
  
  # Email service - Laravel
  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: "email-service_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    volumes:
      - ./email-service:/var/www/html
    environment:
      - APP_NAME=${EMAIL_APP_NAME}
      - APP_ENV=${EMAIL_APP_ENV}
      - APP_KEY=${EMAIL_APP_KEY}
      - APP_DEBUG=${EMAIL_APP_DEBUG}
      - JWT_SECRET=${EMAIL_JWT_SECRET}
      - DB_CONNECTION=mysql
      - DB_HOST=db_server3
      - DB_PORT=3306
      - DB_DATABASE=${EMAIL_DB_DATABASE}
      - DB_USERNAME=${EMAIL_DB_USERNAME}
      - DB_PASSWORD=${EMAIL_DB_PASSWORD}
      - CACHE_STORE=${CACHE_STORE}
      - BROADCAST_CONNECTION=${EMAIL_BROADCAST_CONNECTION}
      - FILESYSTEM_DISK=${EMAIL_FILESYSTEM_DISK}
      - QUEUE_CONNECTION=${EMAIL_QUEUE_CONNECTION}
      - SESSION_DRIVER=${EMAIL_SESSION_DRIVER}
      - SESSION_LIFETIME=${EMAIL_SESSION_LIFETIME}
      - MAIL_MAILER=${EMAIL_MAIL_MAILER}
    ports:
      - "8879:80"
    depends_on:
      - db_server3
    networks:
      - laravel_network
  
  # Orders service - Laravel
  orders-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: "orders-service_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    volumes:
      - ./order-service:/var/www/html
    environment:
      - APP_NAME=${ORDER_APP_NAME}
      - APP_ENV=${ORDER_APP_ENV}
      - APP_KEY=${ORDER_APP_KEY}
      - APP_DEBUG=${ORDER_APP_DEBUG}
      - JWT_SECRET=${ORDER_JWT_SECRET}
      - MONGO_URI="mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@db_server4:27017"
      - INVENTORY_SERVICE_URL=inventory-service:80
      - EMAIL_SERVICE_URL=email-service:80
    ports:
      - "8890:80"
    depends_on:
      - db_server4
      - inventory-service
      - email-service
    networks:
      - laravel_network

  # Api Gateway - Laravel
  api-gateway-service:
    build:
      context: ./api-gateway-service
      dockerfile: Dockerfile
    container_name: "api-gateway_service_${COMPOSE_PROJECT_NAME}"
    restart: unless-stopped
    volumes:
      - ./api-gateway-service:/var/www/html
    environment:
      - APP_NAME=${API_GATEWAY_APP_NAME}
      - APP_ENV=${API_GATEWAY_APP_ENV}
      - APP_KEY=${API_GATEWAY_APP_KEY}
      - APP_DEBUG=${API_GATEWAY_APP_DEBUG}
      - JWT_SECRET=${API_GATEWAY_JWT_SECRET}
      - AUTH_SERVICE_URL=auth-service:80
      - EMAIL_SERVICE_URL=email-service:80
      - INVENTORY_SERVICE_URL=inventory-service:80
      - ORDERS_SERVICE_URL=orders-service:80
    ports:
      - "8891:80"
    depends_on:
      - auth-service
      - inventory-service
      - email-service
      - orders-service
    networks:
      - laravel_network
  